# Quest 04. OOP의 기본

## Introduction
* 이번 퀘스트에서는 바닐라 자바스크립트의 객체지향 프로그래밍에 대해 알아볼 예정입니다.

## Topics
* 객체지향 프로그래밍
    * 프로토타입 기반 객체지향 프로그래밍
      * 객체지향 프로그램 OOP 의 기본 컨셉은 프로그램 내에서 표현하고자 하는 실 세계(real world)의 일들을 객체를 사용해서 모델링하고, 객체를 사용하지 않으면 불가능 혹은 무지 어려웠을 일들을 쉽게 처리하는 방법을 제공한다는 것이다.
      객체는 당신이 모델링 하고자 하는 일이나 기능 혹은 필요한 행동들을 표현하는 프로그램 코드와 그와 연관된 데이터로 구성된다. 객체는 데이터(그리고,함수역시)를 감싸서, (공식적인 표현으로는 encapsulation)객체패키지 (해당 객체를 참조하기 위한 이름. ___namespace___ 라고도 불리죠)안에 보관한다.  
      이는 계층 구조를 만드는데 용이하고 사용하기에도 쉽게 하기 위해서다. 또한 객는 네트워크를 통해 쉽게 전송될수 있도록 데이터를 저장하는 용도로도 많이 사용한다.
      * 객체 템플릿?
        * 예를 들어서, 학교의 선생님과 학생들의 정보를 보여주는 간단한 프로그``램이 있다고 쳤을 때, 여기서는 OOP의 일반적인 개념만을 살펴볼 뿐이고, 특정 언어에 국한된 내용을 이야기하지는 않을 것이다.  
        시작해보자면, `first object article` 에서 배웠던 `Person` 객체``로 돌아가보자 , 거기서 "사람"에 대한 기초적인 데이터와 기능을 정의했었다. "사람"을 구별할 수 있는 특징은 많다. (그들의 주소, 키 신발사이즈, DNA,프로필,여권번호, 중요한 개인적 사실 등 ), 하지만 이 예제에서는 오직 이름, 나이, 성별, 그리고 취미만을 다룰것이다.  
        여기에 더불어서 이 데이터를 기반으로 각 갱니에 대한 간단한 소개말과 인사말을 표시할 수도 있다.
        이런 과정을 ___추상화___ (프로그래머의 의도에 맞추어 가장 중요한것들만을 뽑아서 복잡한 것들을 보다 단순한 모델로 변환하는 작업)라고한다.
      * 실체 객체 생성  
      __객체 인스턴스__ 는 클래스를 통해서 만들 수 있다. (객체는 클래스에 정의된 데이터와 함수를 갖는다.)  
      `Person`클래스를 통해서, 실제 '사람' 객체를 생성할 수 있다.  
      클래스로부터 객체의 인스턴스가 생성될 때는 클래스의 ___생성자 함수___ 가 호출된다. 클래스에서 객체 인스턴스가 생성되는 일련의 과정을 __인스턴스화(Instantiation)__ 이라고 한다.  
        (객체의 인스턴스는 클래스를 통해 만들어진다. )
      * 특별한 클래스  
      이번에는 일반적인 사람이 아니라 일반적인 사람보다 세분화된 선생님과 학생들이 필요하다. OOP에서는 특정 클래스를 기반으로 새로운 클래스를 만들 수 있다.  
      __Child 클래스__ 는 __부모 클래스__ 를 __상속__ 받아서 만들어진다. child 클래스는 상속을 통해 부모 클래스에 정의된 데이터와 함수를 고스란히 사용할 수 있다.  
      클래스마다 기능이 달라지는 부분이 있다면, 직접 해당 클래스에 원하는 기능을 정의할 수 있다.  
      이것은 매우 유용하다. 이름, 성별, 나이 등과 같이 선생님과 학생이 공유하는 많은 공통적인 특징들을 한번만 정의해도 되기 때문이다.  
      또한,서로 다른 클래스에 같은 기능을 따로 정의할 수도 있다. 정의된 각각의 기능은 서로 다른 `namespace`에 존재하기 때문이다.  
      예를 들어 학생의 인사는 " 안녕, 난 [이름]"이야."와 같은 형식디 될 것이다. ex)안녕, 난 샘이야. 반면 선생님은 "안녕하세요, 제 이름은 [성][이름]이고 [과목명]을 담당하고 있습니다." 와 같이 좀 더 격식이 있는 형식을 사용할 것이다. ex) 안녕하세요, 제 이름은 데이브 그리피스이고 화학을 담당하고 있습니다.
      > 노트 : 혹여러 객체 타입에 같은 기능을 정의할 수 잇는 능력 멋진 용어로 "다형성(polymorphism)"이라고 한다.    
      * 이제 자식 클래스들로부터 객체 인스턴스를 만들 수 있다.  
      * ![img_9.png](img_9.png)
  ## 생성자와 객체 인스턴스
자바스크립트는 객체와 그 기능을 정의하기 위해 __생성자 함수__ 라고 불리는 특별한 함수를 사용한다.  
이는 보통 우리가 얼마나 많은 객체들을 생성해야 할지 모르기 때문에 유용하다. 생성자는 효율적으로 필요한 만큼 객체를 생성하고, 데이터와 함수들을 설정하는 방법을 제공한다.  

생성자로부터 새로운 객체 인스턴스가 생성되면, 객체의 핵심 기능 (프로토타입에 의해 정의된다.)이 __프로토타입 체인__ 에 의해 연결된다.

자바스크립트에서 생성자를 이용해 클래스를 만들고, 클래스에서 객체 인스턴스를 만드는 방법이다.
ex) 
1. 어떻게 일반적인 함수를 이용해 한 사람을 정의할 수 있는지부터 확인한다. 이 함수를 `script`태그 안에 추가한다.
```javascript
function createNewPerson(name) {
    var obj = {};
    obj.name = name;
    obj.greeting = function () {
        alert("Hi! I'm "+ this.name + '.');
    };
    return obj;
}
```
2. 이제 이 함수를 호출하여 새로운 사람을 만들수 있다. 브라우저의 스크립트 콘솔에 다음과 같은 코드를 입력한다.
```javascript
var salva = createNewPerson('salva');
salva.name;
salva.greeting();
```
위 코드가 작동은 하지만 깔끔하지 않다. 이유는 객체를 만드는데 왜 굳이 빈 객체를 만들고 내용 채워 리턴을 해야한다는 점에서 때문이다. 
다행이 자바스크릅티는 생성자 함수의 형태로 단축 명령을 아래와 같이 제공한다.
```javascript
function Person(name) {
    this.name = name;
    this.greeting = function () {
        alert("Hi I'm"+ this.name);
    };
}
```
생성자 함수는 클래스의 자바스크립트 버젼이다. 이 함수는 함수를 가질 것 같은 모든 특징을 가지고 있지만, 아무것도 리턴하지 않고 객체를 만들지도 않는다.
생성자 함수는 단순히 프로퍼티와 메소드를 정의한다. 또 이를 정의할 때 `this`라는 키워드가 사용되고 있는 것을 확인할 수 있다. 이것은 객체 인스턴스가 생성될 때마다, 객체의 `name`프로퍼티가 생성자 함수 호출에서 전달된 `name`과 같아 질것이라고 하는 것이다.
그리고 `greeting()`메소드 역시 생성자에서 전달된 name 값을 사용할 것이다.
> 노트 : 관습적으로, 생성자 함수명은 대문자로 시작한다. 이 규칙은 생성자 함수가 코드 안에서 잘 구별되도록 해준다.
  
그럼 어떻게 생성자 함수를 호출하여 객체를 추가하는가?
```javascript
let person1 = new Person(`Bob`);
let person2 = new Person(`Sarah`);
```
코드를 저장하고 브라우저를 새로고침한다. 자바스크립트 콘솔에 다음 코드를 입력해본다.
```javascript
person1.name
person1.greeting()
person2.name
person2.greeting()
```
이렇게 되면 객체 두개가 생성된 것이 확인된다. 각각은 서로 다른 namespace에 저장되어있다. 객체의 프로퍼티와 메소드들을 사용하려면, `person1` 또는 `person2`로부터 호출해야한다. 두 객체의 기능은 따로 패키징되어 서로 충돌하지 않는다.
그리고 이 두 `Person`객체는 각각 고유의 `name`프로퍼티와 `greeting()`메소드를 사용할 수 있다. 이 둘은 생성될 때부터 부여받은 자신의 `name`값을 사용한다는 것에 주목해야한다.  
이것이 `this`를 사용하는 매우 중요한 이유 중 하나이다. 객체들은 다른 값이 아니라, 그들이 가진 고유의 값을 사용한다.
생성자를 다시 호출해본다.
```javascript
let person1 = new Person(`Bob`);
let person2 = new Person('Sarah');
```
각각의 경우, `new` 키워드가 브라우저에게 우리가 새로운 객체 인스턴스를 만들고 싶어한다는 것을 알려준다.  
괄호로 감싸진 매개변수들과 함께 생성자 이름을 호출하고, 결과는 변수에 담겨진다.  
일반적인 함수가 호출되는 방식과 매우 유사하다. 각각의 인스턴스는 다음 정의에 따라 생성된다.
```javascript
function Person(name) {
    this.name = name;
    this.greetin = function () {
        alert('Hi I m '+ this.name + '.');
    };
}
```
새 객체가 생성된 이후, `person1`과 `person2` 변수는 다음 객체들을 가지게 된다.
```javascript
{
    name : `Bob`, 
    greeting : function () {
        alert("Hi! I'm"+this.name + '.');
    }
}
{
    name : `Sarah`,
        greeting : function () {
    alert("Hi! I'm"+this.name + '.');
}
}
```
우리가 생성자 함수를 호출할 때마다 매번 `greeting()`함수를 다시 정의하는 것이 보이는데, 최선의 방법은 아니다.
이를 피하기 위해서 property 함수를 정의해야한다. 이것은 나중에 확인해보도록 한다고 한다.

### 생성자 완성 시키기
위에서 살펴본 예제는 시작에 불과하다. 최종적인 `Person()` 생성자를 만들어보자.
```javascript
function Person(first, last, age, gender, interests) {
    this.name= {
        'first' : first,
        'last' : last,
    };
    this.age = age;
    this.gender= gender;
    this.bio = function () {
        alert(this.name.first+ ' '+this.name.last + 'is'+this.age+'years old. He likes ' + this.interests[0]+ ' and ' + this.interests[1] + '.');
    };
    this.greeting = function () {
        alert("Hi I'm " + this.name + first + '.');
    };
}
```
생성자로 객체 인스턴스를 만들기 위해, 아래에 이 코드를 추가한다.
```javascript
let person1 = new Person('Bob','Smith',32,'male',['music','skiing']);
```
이제 이전에 해보았뜻이, 브라우저의 자바스크립트 콘솔에서 프로퍼티와 메소드를 사용할 수 있다.
```javascript
person1['age']
person1.interests[1]
person1.bio()
// etc. 
```

## 객체 인스턴스를 생성하는 다른 방법들
여태까지 객체 인스턴스를 만드는 두 가지 방법 객체 리터럴을 선언하는 것과, 생성자 함수를 사용하는 방법이다.  
아래는 그 외 방법들이다.

### Object() 생성자
1. 새 객체를 만들기 위해 `Object()` 생성자를 사용할 수 있다. 최초의 `Object`역시 생성자를 가지고 있다. 빈객체를 생성하는 함수이다.  
```javascript
let person1 = new Object();
```
2. 이는 빈 객체를 `person1`에 담는다 이제 이 객체에 점 표기법이나 괄호표기법으로 프로퍼타와 메소드를 추가할 수 있다.
```javascript
person1.name = `Chris`;
person1['age'] = 38;
person1.greeting = function () {
    alert("Hi i'm"+ this.name + ".");
};
```
3. 다른 방법으로는 사전에 프로퍼티와 메소드를 정의하기 위해, `Object()` 생성자의 파라미터로 객체 리터럴을 전달할 수도 있다.
```javascript
let person = new Object({
   name : 'Chris',
   age : 38,
   greeting : function () {
       alert("Hi! I'm"+ this.name + ".");
   } 
});
```
#### Create() 함수 사용
생성자는 코등 규칙을 부여해준다. 일단 생성자를 만들면, 이를 이용해서 원하는 대로 인스턴스를 생성할 수 있고, 이 인스턴스가 어디서 유래되었는가 추적이 명백하다.  
하지만 몇몇 사람들은 객체 인스턴스들을 생성할 때 먼저 생성자를 만들기를 원하지 않는다. 특히 그들이 적은 수의 객체만을 생성할 때 말이다. 자바스크립트는 `create()`라는 내장함수를 가지고 있어서 이를 가능하게 해준다.  
이를 이용하면, 이미 존재하는 객체를 이용해서 새로운 객체를 만들 수 있다.
```javascript
let person2 = Object.create(person1);
```
이 후, 
```javascript
person2.name
person2.greeting()
```
`person2`가 `person1`을 기반으로 만들어졌다. 새 객체는 원 객체와 같은 프로퍼티와 메소드들을 가진다.  
`create()`함수의 한 가지 단점은 익스플로러 8에서는 지원하지 않는다. 따라서 오래된 브라우저에서의 작동까지 고려한다면 생성자르 사용하는 것이 효과적이다.
